/* JSPlus (NodeJS) 1.0.0 Jun 2017 by TienCoffee */
global.rand = function(a, b = 0) {
	if (a > b)
		[a, b] = [b, a];

	return Math.floor(a + Math.random() * (Math.abs(b - a) + 1));
};

global.random = function(a = 1, b = 0) {
	if (a > b)
		[a, b] = [b, a];

	return a + Math.random() * (Math.abs(b - a));
};

Object.defineProperties(Object, {
	size: {
		value(a) {
			var b = 0;
			for (let c in a) a.hasOwnProperty(c) && b++;
			return b
		}
	}
});

Object.defineProperties(Array.prototype, {
	chunk: {
		value(a = 1) {
			if (a *= 1, 0 === a) return this;
			var c, b = [];
			for (c = 0; c < this.length; c += a) b.push(this.slice(c, c + a));
			return b
		}
	},
	combine: {
		value(a) {
			var c, b = {};
			for (c = 0; c < this.length; c++) b[a[c]] = this[c];
			return b
		}
	},
	fill: {
		value(a, b = 0, c = this.length) {
			var d;
			for (d = +b; d < c; d++) this[d] = a;
			return this
		}
	},
	first: {
		value() {
			return this[0]
		}
	},
	last: {
		value() {
			return this[this.length - 1]
		}
	},
	nth: {
		value(a = 0) {
			return a < 0 ? this[this.length + +a] : this[a]
		}
	},
	rand: {
		value() {
			return this[Math.floor(Math.random() * this.length)]
		}
	},
	shuffle: {
		value() {
			var b, a = this.slice(0);
			for (this.splice(0); a.length;) b = Math.floor(Math.random() * a.length), this.push(a[b]), a.splice(b, 1);
			return this
		}
	},
	unique: {
		value() {
			var b, c, a = this.slice(0);
			for (b = 0; b < a.length - 1; b++)
				for (; b !== (c = a.lastIndexOf(a[b]));) a.splice(c, 1);
			return a
		}
	}
});

Object.defineProperties(String.prototype, {
	isBlank: {
		value() {
			return 0 === this.valueOf().trim().length
		}
	},
	isEmpty: {
		value() {
			return 0 === this.valueOf().length
		}
	},
	isLowerCase: {
		value() {
			var a = this.valueOf();
			return a === a.toLowerCase()
		}
	},
	isUpperCase: {
		value() {
			var a = this.valueOf();
			return a === a.toUpperCase()
		}
	},
	ln2br: {
		value() {
			return this.valueOf().replace(/\n/g, "<br>")
		}
	},
	lowerFirst: {
		value() {
			var a = this.valueOf();
			return a[0].toLowerCase() + a.slice(1)
		}
	},
	upperFirst: {
		value() {
			var a = this.valueOf();
			return a[0].toUpperCase() + a.slice(1)
		}
	}
});

Object.defineProperties(Number.prototype, {
	toSign: {
		value() {
			var a = this.valueOf();
			return a > 0 ? "+" + a : "" + a
		}
	},
	zeroFill: {
		value(a) {
			var c, d, b = this.valueOf();
			return d = b.toString().match(/(\-?)(\d+)(.*)/), c = (c = a - d[2].length) > 0 ? "0".repeat(c) : "", d[1] + c + d[2] + d[3]
		}
	}
});
